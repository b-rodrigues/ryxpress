{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ryxpress","text":"<p>Welcome to the documentation for ryxpress.</p>"},{"location":"#quick-start","title":"Quick start","text":"<p>TBC</p>"},{"location":"#api","title":"API","text":"<p>You can view autogenerated API reference under the \"API \u2192 Reference\" page.</p>"},{"location":"reference/","title":"API Reference","text":"<p>ryxpress package \u2014 lightweight top-level API with lazy submodule imports.</p> <p>This init is deliberately lightweight so simple imports (like tests that only check version and hello()) do not fail if optional dependencies of submodules are missing. Submodules are imported lazily on attribute access.</p> <p>Module-to-file mapping uses the actual filenames present under src/ryxpress: - r_runner.py         -&gt; ryxpress.r_runner - rxp_copy.py         -&gt; ryxpress.rxp_copy - rxp_gc.py           -&gt; ryxpress.rxp_gc - rxp_init.py         -&gt; ryxpress.rxp_init - rxp_inspect.py      -&gt; ryxpress.rxp_inspect - rxp_read_load.py    -&gt; ryxpress.rxp_read_load - plot_dag.py         -&gt; ryxpress.plot_dag - rxp_trace.py        -&gt; ryxpress.rxp_trace</p>"},{"location":"reference/#ryxpress.__getattr__","title":"<code>__getattr__(name)</code>","text":"<p>Lazy-load attributes from submodules on first access.</p> Example <p>from ryxpress import rxp_make   # triggers import ryxpress.r_runner</p> Source code in <code>src/ryxpress/__init__.py</code> <pre><code>def __getattr__(name: str):\n    \"\"\"\n    Lazy-load attributes from submodules on first access.\n\n    Example:\n        from ryxpress import rxp_make   # triggers import ryxpress.r_runner\n    \"\"\"\n    if name in _lazy_imports:\n        module_path, symbol = _lazy_imports[name]\n        try:\n            import importlib\n            mod = importlib.import_module(module_path)\n        except Exception as e:\n            raise ImportError(\n                f\"Failed to import optional submodule '{module_path}' required for '{name}'. \"\n                f\"Import the module directly to see details: import {module_path!r}. \"\n                f\"Original error: {e}\"\n            ) from e\n\n        if symbol is None:\n            value = mod\n        else:\n            try:\n                value = getattr(mod, symbol)\n            except AttributeError as e:\n                raise ImportError(\n                    f\"Module '{module_path}' does not define expected symbol '{symbol}'.\"\n                ) from e\n\n        # cache for subsequent lookups\n        globals()[name] = value\n        return value\n\n    raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n</code></pre>"},{"location":"reference/#ryxpress.hello","title":"<code>hello()</code>","text":"<p>Small example function to verify the package imports.</p> Source code in <code>src/ryxpress/__init__.py</code> <pre><code>def hello() -&gt; str:\n    \"\"\"Small example function to verify the package imports.\"\"\"\n    return \"Hello from ryxpress!\"\n</code></pre>"}]}